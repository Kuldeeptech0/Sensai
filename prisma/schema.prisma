// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  clerkUserId       String    @unique // clerk user Id
  name              String?
  imageUrl          String?
  email             String    @unique  
  industry          String    //combined industry-subindustry(e.g.,"tech-software-devlopment")
  industryInsight   IndustryInsights? @relation(fields: [industry], references: [industry])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Profile fields
  bio               String?
  experience        Int?        //years of experience
  location          String[]    //array of skills


  assessments       Assessment[]
  resumes           Resume?
  coverLetter       CoverLetter[]
}


model Assessment {
  id                String    @id @default(cuid())
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  quixScore         Float     //Overall quix score
  questions         Json      //array of {question, answer, useranswer, isCorrect}
  category          String    //"Techical", "Behavioral", "Other"
  improvementTips   String?   //AI-generated tips for improvement
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([userId])
}
model Resume {
  id                String    @id @default(cuid())
  userId            String    @unique
  user              User      @relation(fields: [userId], references: [id])
  content           String    @db.Text    //Markdown content
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}
model CoverLetter {
  id                String    @id @default(cuid())
  userId            String    
  user              User      @relation(fields: [userId], references: [id])
  content           String    @db.Text  //Markdown content
  jobDescription    String?
  companyName       String    //Name of the company applying to
  jobTitle          String    //Position applying for
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([userId])
}

model IndustryInsights{
    id                String    @id @default(cuid())
    industry          String    @unique //The industry this data belongs to (e.g., "Tech-software-development")

  //Users in this industry
  users             User[]

  //Salary data
  salaryRanges      Json      //Array of {role: string, min: float, max: float, median: float, location: string}

  //Industry trends
  growthRate        Float     // growth rate of the industry
  demandLevel       DemandLevel     // "High" , "Medium", "Low"
  topSkills         String[]  // Most in-demand skills in the industry


  // Market Conditions
  marketOutLook   MarketOutLook    // "Positive", "Negative", "Neutral"
  keyTrends        String[]  // Array of current industry trends

  //Learning suggestions
  recommendedSkills  String[]  // Array of skills to learn based on industry trends

  lastUpdated       DateTime  @default(now())
  nexrtUpdate       DateTime  // Schuduled update time

  @@index([industry])
}

enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}

enum MarketOutLook {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

